[
{
	"uri": "/ee/2_moduletwo_setup/21_awseventengine.html",
	"title": "AWS Event Engine",
	"tags": [],
	"description": "",
	"content": " AWS Event Engine Attending an AWS hosted event To complete this workshop, you will be provided with an AWS account via the AWS Event Engine service. The AWS staff will send an Event Engine dashboard link with a hash parameter, please follow the below instructions on how to get access into your account.\nIf you are currently logged in to an AWS Account, you can log out using this link (https://aws.amazon.com/console/)\nLogging into Event Engine Dashboard Click on the link that the AWS staff has given you, it should look something like this: https://dashboard.eventengine.run/login?hash=s0m3-r4nd0mh4shval-ue. You should land on this page: Event Engine Sign In\rClick the Email One-Time Password option and enter your email address. You’ll wait 2-3 minutes for an email with the confirmation code. Please enter the confirmation code.\rYour page should look like this: EE Successful OTP Sign In\rYou should now be on the Event Engine dashboard: Event Engine Dashboard\rSelect the AWS Console button. Click the Open AWS Console to be sent to your AWS Dashboard. Access key\rThis popup also includes the AWS Access Key and AWS Secret Access Key that you’ll need to add to your CircleCI’s environment variable later on in the workshop!\rMake sure you’re in the us-east-1 region. Please select US East (N.Virginia) in the top right corner. Event Engine Region\rWarning: This account will expire at the end of the workshop and all the resources created will be automatically de-provisioned. You will not be able to access this account after today.\n"
},
{
	"uri": "/ee/",
	"title": "AWS Modernization Workshop Base Template",
	"tags": [],
	"description": "",
	"content": "AWS Modernization Workshop Base Template Welcome REMOVE: By utilizing this template, you can create your workshops with little coding knowledge. These workshops use the Hugo Framework and the hugo-theme-learn submodules. By writing content using simple markdown code, Hugo creates the necessary HTML for you. Examples of code, files, and folders here can be modified, copied, pasted, and deleted as necessary. Block sections of instruction that should be removed will be explicitly marked with REMOVE. Other sections should be modified to reflect the workshop. For guidance on how to utilize the Hugo framework and markdown, please refer to the module titled \u0026ldquo;Hugo Framework And Markdown\u0026rdquo;. That module can be removed once building the workshop is complete.\nThis paragraph block can give the high level overview of the learning goals and use cases of what the workshop is trying to teach.\nThis paragraph block can be used to introduce the company and how the solution being taught addresses specific issues.\nREMOVE: Every introduction page should include the following warning label.\nThe examples and sample code provided in this workshop are intended to be consumed as instructional content. These will help you understand how various AWS services can be architected to build a solution while demonstrating best practices along the way. These examples are not intended for use in production environments.\n"
},
{
	"uri": "/ee/1_moduleone/11_foreword.html",
	"title": "Foreword",
	"tags": [],
	"description": "",
	"content": "Foreword Submodule One Heading This paragraph block should be an explanation of an existing problem and how the partner has worked to achieve a solution for it. Example content guidance can be found at the bottom of this page.\nNext Section Heading This paragraph block can optionally be utilized to lead into the next section of the workshop.\nExample Content Guidance The nature of software development has fundamentally changed Teams and organizations are releasing code at a record breaking pace and only getting faster. This is primarily attributed to these teams adopting and implementing modern concepts and practices, such as Continuous Delivery, Continuous Integration/Deployments (CI/CD) and DevOps into their software development processes. These modern concepts enable teams to better align development and delivery efforts resulting in teams collaborating around code and an increased awareness among collaborators no matter their role.\n"
},
{
	"uri": "/ee/1_moduleone.html",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction Learning Objectives This paragraph block should highlight the learning objectives of the workshop. A bulleted list works well for this purpose.\nWorkshop Structure This paragraph block should be utilized to briefly explain the submodules that are going to be presented as well as the approximate total time for the workshop and individual submodules. For example:\nREMOVE: Every introduction page should include the following warning label.\nThe examples and sample code provided in this workshop are intended to be consumed as instructional content. These will help you understand how various AWS services can be architected to build a solution while demonstrating best practices along the way. These examples are not intended for use in production environments.\nNext Section Heading This paragraph block can optionally be utilized to lead into the next section of the workshop.\n"
},
{
	"uri": "/ee/3_modulethree/31_partnersetup.html",
	"title": "Partner Setup Instructions",
	"tags": [],
	"description": "",
	"content": "Partner Setup Instructions Submodule One Heading This paragraph block should be an introduction to the submodule.\nSubmodule One Subheading This paragraph block should be utilized to start the submodule. Next Section OR Conclusion Heading This paragraph block can be utilized to lead into the next section of the workshop (which might be a conclusion) or be a conclusion itself.\nExample Guidance Content Below Do you require attendees to sign up for things? Introduction In this section, we are going to discuss tasks and concepts like retrieving access tokens and other configurations within some integration services.\nDocker Hub Docker Hub is a service provided by Docker for finding and sharing container images with your team. It is the world’s largest repository of container images with an array of content sources including container community developers, open source projects and independent software vendors (ISV) building and distributing their code in containers.\nCreate a Docker Hub Access Token The pipeline will package the application into a Docker image. It then pushes that image a public Docker Hub image repository so that it will be available to the deployment segment of the pipeline. To push or upload the newly-built Docker image, the pipeline will need an access token to authorize transaction on your Docker Hub account. You will need to create a new access token (https://docs.docker.com/docker-hub/access-tokens/) and store it for use in later modules. To create your new access tokens:\nLog in to hub.docker.com\rClick your username in the top right corner and select Account Settings\rSelect Security \u0026gt; New Access Token.\rAdd a description for your token that indicates where the token will be used, or that sets a purpose for the token\rCopy the token that appears on the screen and record it in a safe location for use in future modules. Make sure you do this now! Once you close this prompt, Docker will never show the token again and you will have to create a new one\rWarning: Docker Hub credentials and access tokens must be protected and not shared with unauthorized parties to prevent exposure and unauthorized access.\nNow that you have created and safely recorded your new access token, let’s move to the next section and create a new Snyk Access token.\nSnyk Snyk is an open source security platform designed to help software-driven businesses enhance developer security. Snyk’s dependency scanner makes it the only solution that seamlessly and proactively finds, prioritizes, and fixes vulnerabilities and license violations in open source dependencies and container images.\nCreate Snyk Access Token Visit your Snyk account (Account Settings \u0026gt; API Token section) (https://app.snyk.io/account)\rIn the KEY field, select click to show, then select and copy your API token from the field\rPaste the token that appears on the screen in a safe location for use in future modules\rWarning: Your Snyk access token must be protected and not shared with unauthorized parties to prevent exposure and unauthorized access.\nYou can read more about Snyk Access Token from their docs here.\nGreat, you have created and safely stored your newly created Snyk access token, Now, let’s create the Terraform Cloud access token.\nTerraform Cloud Terraform Cloud is an application that helps teams use Terraform together. It manages Terraform runs in a consistent and reliable environment, and includes easy access to shared state and secret data, access controls for approving changes to infrastructure, a private registry for sharing Terraform modules, detailed policy controls for governing the contents of Terraform configurations, and more.\nYou will be using Terraform Cloud to store the Terraform state of the infrastructures your pipeline will provision and deploy using Terraform in future modules.\nCreate Terraform Cloud Access Token Create a `[Terraform Cloud ](https://app.terraform.io/signup/account)` account\rCreate a new '[Terraform Cloud organization ] (https://learn.hashicorp.com/terraform/cloud-getting-started/signup#create-your-organization)'\rCreate a new '[Terraform Cloud workspace ] (https://learn.hashicorp.com/terraform/cloud-getting-started/create-workspace)' named: arm-aws-ecs\rClick the CLI-driven workflow option\rIn the workspace, click arm-aws-ecs \u0026gt; Settings \u0026gt; General then enable '[local execution mode] (https://www.terraform.io/docs/cloud/workspaces/settings.html#execution-mode)'\rGo to the '[User Settings section] (https://www.terraform.io/docs/cloud/users-teams-organizations/users.html#user-settings)' in the Terraform Cloud Dashboard\rIn the User Settings section, Create a new '[Terraform API token] (https://www.terraform.io/docs/cloud/users-teams-organizations/users.html#api-tokens)' then copy and paste the token in a secure location for later use.\rWarning: Your Terraform Cloud API token must be protected and not shared with unauthorized parties to prevent exposure and unauthorized access.\nGreat, you have created and safely stored your newly created Terraform Cloud API Token.\n"
},
{
	"uri": "/ee/2_moduletwo_setup.html",
	"title": "AWS Hosted Workshop Setup",
	"tags": [],
	"description": "",
	"content": "AWS Hosted Workshop Setup Module Two Heading This paragraph block should be an introduction to the module about the method of setting up the workshop using EventEngine in AWS. Some typical examples of the steps in this process will explain logging out of any current AWS accounts, how to utilize the hashed URL, utilizing the Team Dashboard to log in to the AWS console, and ensure that the correct region is being selected.\nREMOVE: Every introduction page should include the following warning label.\nThe examples and sample code provided in this workshop are intended to be consumed as instructional content. These will help you understand how various AWS services can be architected to build a solution while demonstrating best practices along the way. These examples are not intended for use in production environments.\nAWS Hosted Setup A brief overview of submodule two explaining setting up the workshop with the AWS EventEngine.\nNext Section Heading This paragraph block can optionally be utilized to lead into the next section of the workshop.\nExample Content Guidance Event Engine Welcome to the Event Engine Setup section! This means that you are attending an AWS Hosted Workshop! Event Engine is a tool created at AWS that provisions AWS accounts for workshop events like this! These accounts will automatically terminate 24 hours after the workshop begins so participants don’t have to worry about leaving anything on. Each workshop participant will receive their own Event Engine AWS account.\nHere is a preview of what we will be setting up:\nCreating a Cloud9 IDE Workspace\rCreating an IAM Role\rAttaching an IAM Role\rConfiguring Cloud9 Workspace\rThe next page will show you how to gain access to your Event Engine dashboard!\n"
},
{
	"uri": "/ee/1_moduleone/12_technicalissue_problem.html",
	"title": "Technical Issue / Problem",
	"tags": [],
	"description": "",
	"content": "Technical Issue / Problem Submodule Two Heading This paragraph block should be an introduction to the technical issue the solution is facing. An example of this can be seen at the bottom of this page. Next Section Heading This paragraph block can optionally be utilized to lead into the next section of the workshop.\nExample of content guidance Deploy Without Worry Deployments with Kubernetes? Kubernetes (k8s) is a container orchestration platform allowing organizations to scale their services and workloads quickly. If you are working with containers or microservices, k8s may be a great use case for you. Kubenetes deployments are container image deployments which target k8s-based environments.\nAmazon has released a managed k8s service called Elastic Kubernetes Service (EKS). Amazon EKS helps you provide highly-available and secure clusters and automates key tasks such as patching, node provisioning, and updates. While AWS provides the platform on which to run your containerize applications deploying them in a scalable, repeatable and reliable way is where Harness comes in.\nHow does Harness help with EKS deployments? Harness has first-class support for Kubernetes Resources. Harness can create scaffolding around Kubernetes Resources removing complexities around crafting your own resource definitions that are purpose made for deployments. Harness can offer granular deployment lifecycle support around different Kubernetes Resources supporting canary and blue/green deployments inside Kubernetes.\nWhy is Canary deployment tricky with EKS deployments? Canary Deployments are a progressive delivery pattern for rolling out releases to a subset of users. Canary Deployments can be complex because of the multiple phases and the judgment call of when to promote or rollback a canary. The Harness Platform has smart verification taking away the manual toil in verification and enables seamless Canary Deployments.\n"
},
{
	"uri": "/ee/3_modulethree.html",
	"title": "Partner Setup",
	"tags": [],
	"description": "",
	"content": "Partner Setup Module Three Heading This paragraph block should be an introduction to the module about requirements the partner may need for their audience members. Examples include signing up for the partner platform or installing an agent.\nModule Three Subheading This paragraph block should be utilized to briefly explain the submodules. Partner Setup Instructions A brief overview of submodule one.\nREMOVE: Every introduction page should include the following warning label.\nThe examples and sample code provided in this workshop are intended to be consumed as instructional content. These will help you understand how various AWS services can be architected to build a solution while demonstrating best practices along the way. These examples are not intended for use in production environments.\nNext Section Heading This paragraph block can optionally be utilized to lead into the next section of the workshop.\n"
},
{
	"uri": "/ee/1_moduleone/13_whoweare.html",
	"title": "Who We Are",
	"tags": [],
	"description": "",
	"content": "Who Are We? Submodule Three Heading This paragraph block should be a brief introduction to the partner, their history, goals, partnerships, and accolades. Next Section Heading This paragraph block can optionally be utilized to lead into the next section of the workshop.\n"
},
{
	"uri": "/ee/4_modulefour.html",
	"title": "Hugo Framework and Markdown",
	"tags": [],
	"description": "",
	"content": "Hugo Framework and Markdown Setting Up The Workshop: AWS Hosted Or Self-paced By utilizing the Hugo language localization settings, directing the workshop towards a specific setup can be simplified. The Language setting in the config.toml file will allow you to distinguish between having one option or both. Commenting out one of the languages will hide all files that are related to that setup. By default, only the self-guided setup will be enabled. To enable switching, set disableLanguageSwitchingButton to false in the config.toml. If you want to have only the Event Engine setup, set the defaultContentLanguage at the top of the config.toml file to ee.\nThe Entry Point Of The Workshop And Naming Conventions All modifications should be done to files in the content folder. _index.md serves as the main entry point to your workshop. Adding modules can be done utilizing the format of #_title as a folder within content. By adding a number value to the title, this helps to keep the files structured in parity with the content of the workshop. A good practice for file naming is to have the folder be the module number and the submodule numbers add to that number reflecting their order. For example, the first module is 1_ModuleOne and the submodules would be 11_SubmoduleOne, 12_SubmoduleTwo, and so forth. To ensure the modules and submodules follow the correct structure order, adjust the \u0026ldquo;weight\u0026rdquo; value in the heading of the file to reflect the order you wish to use. Three module examples are included in this template with the second being split based upon the method of setup. The same rules apply for submodules. _index.md will be the entry point of that module. Submodules should be named with the format of {module number}{weight}_{title}.{language}.md. For example, 11_Foreword.md would be the first submodule of module one in the default language/setup. 31_PartnerSetup.ee.md would be the first submodule of module 3 in the EventEngine language/setup.\nWorking With Hugo Markdown and Shortcode The following links will supply you with all the reference documentation about Hugo markdown. For more experienced developers, inline HTML is also an option to add more customization. For example \u0026lt;p style='text-align: left;'\u0026gt; inline will allow you to adjust your text placement.\nMarkdown and Shortcode Resources The following links are your go-to resource for markdown and shortcode reference in building your workshop: Markdown cheat sheet https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet Learn theme markdown https://learn.netlify.app/en/cont/markdown/ Menu extras and shortcuts https://learn.netlify.app/en/cont/menushortcuts/ Using Font Awesome Emoji\u0026rsquo;s https://learn.netlify.app/en/cont/icons/ to help your page pop Adding Images and Static Media Any images and static media to be included in the workshop need to be placed in the static/images folder. The format to display an image is as follows: ![Alternate Text](/images/imagename.jpg) For example, the markdown for this dog is ![An adorable puppy](/images/dog.jpg) and the image is in the static/images folder. Creating Links The format for creating links is [Link Display Text](http://example.com). For example, this link Hugo Framework was created using [Hugo Framework](https://gohugo.io/about/what-is-hugo/).\nThe \u0026ldquo;More\u0026rdquo; Menu Section This section of the menu on the left is designed to add additional resources that are related to the workshop but not necessarily part of the workshop itself. To modify these links, edit the sections marked [[menu.shortcuts]] in the config.toml located in the root folder. The \u0026ldquo;name\u0026rdquo; portion will be what is displayed in the menu. The \u0026ldquo;url\u0026rdquo; should be the address of the link. The \u0026ldquo;weight\u0026rdquo; setting will adjust the display order, similar to the other \u0026ldquo;weight\u0026rdquo; settings utilized in indexes and modules mentioned previously.\nEnsuring Pages Appear In Both Setup Versions A shortcut to creating the workshop with different setup versions is utilizing the localization functionality of Hugo. By adding a secondary extension to the filename, this file will be included in the specific version of the workshop. Currently, the base utilizes the format *.ee.md to signify that the page is to be used in the AWS EventEngine setup. Much of the time, the files will be the same as the content only differs at specific points. It is necessary to add them, however, to make sure that the common content is duplicated across both versions. If you wish to change the secondary extension or default version, this can be done in the config.toml file in the heading and [Languages] sections.\n"
},
{
	"uri": "/ee/1_moduleone/14_workshopprerequisites.html",
	"title": "Workshop Prerequisites",
	"tags": [],
	"description": "",
	"content": "Workshop Prerequisites Submodule Four Heading This paragraph block should be an introduction to the submodule. Are there any prerequisites the user must perform to begin the workshop? Do they need to sign up for any external accounts or install any tools? An example of content guidance can be found at the bottom of this page.\nNext Section Heading This paragraph block can optionally be utilized to lead into the next section of the workshop.\nExample of content guidance Workshop Prerequisites There are some prerequisites required for completing this workshop.\nSome of these may be skipped if you already have the required accounts and tools.\n"
},
{
	"uri": "/ee/1_moduleone/15_nextsteps.html",
	"title": "Workshop Next Steps",
	"tags": [],
	"description": "",
	"content": "Workshop Next Steps Submodule Five Heading This paragraph block should be an brief explanation of the next steps to take after the prerequisites have been set up. Diagrams or code samples can be shown to give a visual explanation of what will be taking place during the building of the solution. An example of content guidance can be found at the bottom of this page.\nNext Section Heading This paragraph block can optionally be utilized to lead into the next section of the workshop.\nExample of content guidance Configuring Your Solution While working through the workshop modules, you will progressively build a 3-tier web application by utilizing core AWS services. We will provide you with any code examples and any directions specific to the set up approach we will be utilizing. Some of these may be skipped if you already have the required accounts and tools.\n"
},
{
	"uri": "/ee/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/ee/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]